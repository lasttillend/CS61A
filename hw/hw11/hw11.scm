(define (find s predicate)
    (cond ((null? s) #f)
        ((predicate (car s)) (car s))
        (else (find (cdr-stream s) predicate)))
)

(define (scale-stream s k)
    (if (null? s)
        nil
    (cons-stream (* (car s) k)
                 (scale-stream (cdr-stream s) k)))
)

(define (has-cycle s)
    (define (in? lst s)
        (cond ((null? lst) #f)
              ((eq? (car lst) s) #t)
              (else (in? (cdr lst) s))))

    (define (has-cycle-helper memo s)
        (cond ((null? s) #f)
              ((in? memo s) #t)
              (else (has-cycle-helper (cons s memo) (cdr-stream s)))))
    (has-cycle-helper nil s)
)

(define (has-cycle-constant s)
    (let ((slow s)
          (fast (cdr-stream s)))
         (cycle-stepper slow fast)
    )
)

(define (cycle-stepper slow fast)
    (cond ((or (null? fast) (null? (cdr-stream fast))) #f)
          ((eq? fast slow) #t)
          (else (cycle-stepper (cdr-stream slow) (cdr-stream (cdr-stream fast))))))
